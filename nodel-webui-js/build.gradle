import org.apache.tools.ant.filters.ReplaceTokens
import org.joda.time.DateTime

buildscript {
    repositories {
        mavenCentral()
        gradlePluginPortal()
    }

    dependencies {
        classpath 'joda-time:joda-time:2.10.10'
    }
}

plugins {
    id 'java'
    id 'eclipse'
    id 'maven-publish'
    id 'com.github.node-gradle.node' version '3.4.0'
}

repositories {
    mavenCentral()
    gradlePluginPortal()
}

dependencies {
    implementation 'joda-time:joda-time:2.10.10'
    implementation 'org.joda:joda-convert:2.2.1'
}

def hostname = InetAddress.getLocalHost().getHostName().toUpperCase()
def now = DateTime.now().toString()

def gitBranch = 'git rev-parse --abbrev-ref HEAD'.execute().text.trim()
def gitId = 'git rev-parse HEAD'.execute().text.trim()
def gitRev = 'git rev-list --count HEAD'.execute().text.trim()
def gitOrigin = 'git config --get remote.origin.url'.execute().text.trim()

def branch = gitBranch
if (branch.equals("master"))
    branch = "dev"

def rev = gitRev
rev = rev.replaceAll(/[^a-zA-Z0-9]/, '')

def buildSummary = gitId

if (!branch.equals("stable"))
    version project.version + "-" + branch + "_r" + rev

node {
    version = '16.20.2'
    download = true
    workDir = file("${project.buildDir}/nodejs")
    npmInstallCommand = System.getenv("CI") ? 'ci' : 'install'
}

tasks.register('installGruntCli', NpmTask) {
    args = ['install', 'grunt-cli', '--save-dev', '--legacy-peer-deps']
}

tasks.register('gruntRun', NpmTask) {
    dependsOn installGruntCli
    args = ['run-script', 'run-grunt']
    inputs.file("Gruntfile.js")
    inputs.dir("src")
    inputs.dir("node_modules")
    outputs.dir("build/grunt")
}

tasks.named('clean') {
    doFirst {
        delete "${projectDir}/node_modules/"
        delete "${projectDir}/temp/"
    }
}

tasks.register('checkDistDirectory', Task) {
    dependsOn gruntRun
    doLast {
        def distDir = file("${project.buildDir}/dist")
        if (distDir.exists()) {
            println "Contents of 'dist' directory:"
            distDir.eachFile { file ->
                println file.name
            }
        } else {
            println "'dist' directory does not exist"
        }
    }
}

tasks.register('copyContent', Copy) {
    dependsOn gruntRun, checkDistDirectory
    from file("${project.buildDir}/grunt")
    into file("${project.buildDir}/www-content_stage")
    exclude 'build.json'
}

tasks.register('filterContentTemplates', Copy) {
    from 'src'
    into file("${project.buildDir}/www-content_stage")
    include 'build.json'
    filter(ReplaceTokens, tokens: [
            buildSummary: project.name + "-" + project.version + " " + buildSummary + " (" + hostname + ") " + now,
            buildOrigin: gitOrigin,
            buildProject: project.name,
            buildBranch : branch,
            buildVersion: project.version,
            buildId     : buildSummary,
            buildRev    : rev,
            buildHost   : hostname,
            buildDate   : now
    ])
}

// ... (previous code remains the same)

tasks.register('zipContentInterface', Zip) {
    dependsOn copyContent, filterContentTemplates
    from file("${project.buildDir}/www-content_stage")
    archiveName 'content.zip'
    destinationDirectory = file("${project.buildDir}/www-content/org/nodel/host")
}

tasks.register('copyBuildInfo', Copy) {
    dependsOn copyContent, filterContentTemplates
    from file("${project.buildDir}/www-content_stage")
    include 'build.json'
    into file("${project.buildDir}/www-content/org/nodel")
}

sourceSets {
    main {
        resources.srcDirs = [file("${project.buildDir}/www-content")]
    }
}

tasks.named('compileJava') {
    dependsOn zipContentInterface, copyBuildInfo
}

tasks.named('processResources') {
    dependsOn zipContentInterface, copyBuildInfo
}

dependencies {
    implementation 'joda-time:joda-time:2.10.10'
    implementation 'org.joda:joda-convert:2.2.1'
}