plugins {
    id 'java'
    id 'application'
    id 'maven-publish'
    id 'eclipse'
}

repositories {
    mavenCentral()
}

application {
    mainClass = 'org.nodel.jyhost.Launch'
}

jar {
    from "$buildDir/output"
    archiveBaseName = 'nodel-jyhost'
    manifest {
        attributes 'Implementation-Title': 'Nodel JyHost',
                'Implementation-Version': archiveVersion
    }
}

tasks.register('fatJar', Jar) {
    manifest {
        attributes 'Implementation-Title': 'Nodel JyHost',
                'Implementation-Version': archiveVersion,
                'Main-Class': application.mainClassName
    }
    archiveAppendix = rootProject.ext.branch
    archiveBaseName = 'nodelhost'
    archiveClassifier = 'rev' + rootProject.ext.rev
    destinationDirectory = new File(buildDir, 'distributions/standalone')
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.register('unversioned', Copy) {
    dependsOn 'fatJar'
    from(new File(buildDir, 'distributions/standalone')) {
        rename '.*($archiveVersion)*', 'nodelhost.jar'
    }

    into new File(buildDir, 'distributions/standalone')
}

tasks.build {
    finalizedBy 'fatJar'
}

tasks.named('distTar') {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.named('distZip') {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

def process

tasks.register('cleanNodelhostTemp') {
    doLast {
        def nodelhostTempDir = new File("$projectDir/nodelhost-temp")
        if (nodelhostTempDir.exists()) {
            nodelhostTempDir.deleteDir()
            println "Cleaned nodelhost-temp directory"
        }
    }
}

clean {
    dependsOn 'cleanNodelhostTemp'
}

tasks.register('startApplication') {
    dependsOn 'cleanNodelhostTemp'
    doLast {
        def nodelhostTempDir = new File("$projectDir/nodelhost-temp")
        if (!nodelhostTempDir.exists()) {
            nodelhostTempDir.mkdirs()
        }

        def processBuilder = new ProcessBuilder(
                'java',
                '-cp', sourceSets.main.runtimeClasspath.asPath,
                '-ea',
                'org.nodel.jyhost.Launch'
        )
        processBuilder.directory(nodelhostTempDir)
        processBuilder.redirectOutput(new File("$nodelhostTempDir/output.log"))
        processBuilder.redirectError(new File("$nodelhostTempDir/error.log"))
        process = processBuilder.start()
    }
}

def cleanupTask = tasks.register('cleanupApplication') {
    doLast {
        if (process != null && process.isAlive()) {
            logger.lifecycle("Terminating the spawned process...")
            process.destroy()
            logger.lifecycle("Spawned process terminated.")
        }
    }
}

tasks.register('startApplicationInteractive') {
    dependsOn 'cleanNodelhostTemp'

    // Declare a variable to store the spawned process
    process = null

    doLast {
        def nodelhostTempDir = new File("$projectDir/nodelhost-temp")
        if (!nodelhostTempDir.exists()) {
            nodelhostTempDir.mkdirs()
        }

        def processBuilder = new ProcessBuilder(
                'java',
                '-cp', sourceSets.main.runtimeClasspath.asPath,
                '-ea',
                'org.nodel.jyhost.Launch'
        )
        processBuilder.directory(nodelhostTempDir)

        // Redirect the process output to the Gradle logger
        processBuilder.redirectErrorStream(true)
        process = processBuilder.start()

        // Create a separate thread to consume the process output
        Thread outputThread = new Thread({
            process.inputStream.eachLine { line ->
                logger.lifecycle(line)
            }
        })
        outputThread.start()

        // Wait for the process to terminate
        process.waitFor()

        // Wait for the output thread to finish
        outputThread.join()
    }

    // Configure the task to run only if the process is not already running
    onlyIf {
        process == null || !process.isAlive()
    }

    // Specify the cleanup task to run after this task, even if it fails or is stopped
    finalizedBy cleanupTask
}


tasks.register('stopApplication') {
    doLast {
        if (process != null) {
            process.destroy()
            println "Application stopped"
        }
    }
}

// ./gradlew playwright --args="help"
task playwright(type: JavaExec) {
    classpath sourceSets.test.runtimeClasspath
    mainClass = 'com.microsoft.playwright.CLI'
}

test {
    dependsOn startApplication
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    finalizedBy stopApplication
    ignoreFailures = true
}


dependencies {
    implementation project(':nodel-webui-js')
    implementation project(':nodel-framework')
    implementation 'commons-daemon:commons-daemon:1.0.15'
    implementation 'org.slf4j:slf4j-api:1.7.10'
    implementation 'org.python:jython-standalone:2.5.4-rc1'

    // for the Nodel HTTP client:
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.5'

    // convenience dependency: required *only* for 'recipe sync' node
    implementation 'org.eclipse.jgit:org.eclipse.jgit:3.7.1.+'

    // convenience dependency: required for new SNMP-based nodes
    implementation('org.snmp4j:snmp4j:2.5.8') {
        exclude group:'log4j', module:'log4j' // (brings one extra dependency: log4j; can explicity exclude it because it's optional at runtime)
    }

    // convenience dependency: JWTs (JSON Web Tokens), see https://github.com/museumsvictoria/nodel/discussions/297
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-orgjson:0.11.5'

    // Add joda-time dependency
    implementation 'joda-time:joda-time:2.10.14'

    // add Playwright and test dependencies
    testImplementation 'com.microsoft.playwright:playwright:1.42.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}